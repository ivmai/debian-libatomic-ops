commit 393d7a7ff54565230f44e59a9c73addc9e627f56
Author: Ivan Maidanski <ivmai@mail.ru>
Date:   Wed Feb 21 10:58:33 2018 +0300

    Enable CAS for byte and short on RISC-V
    
    Issue #31 (libatomic_ops).
    
    At least for gcc-7.2.0 does not define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1
    and __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 macros but, nonetheless, all the
    provided CAS operations are lock-free (except for double-word).
    
    * src/Makefile.am (nobase_private_HEADERS): Add gcc/riscv.h entry.
    * src/atomic_ops.h [__GNUC__ && !AO_USE_PTHREAD_DEFS
    && !__INTEL_COMPILER && __riscv]: Include gcc/riscv.h file.
    * src/atomic_ops/sysdeps/gcc/riscv.h: New file (include generic.h).
    * src/atomic_ops/sysdeps/gcc/riscv.h (AO_GCC_FORCE_HAVE_CAS): Define
    before include generic.h (and undefined at the end of file); add
    comment about double-word operations.

commit 27ca1b0f306cb99f14f863b22d490bb30c778300
Author: Shea Levy <shea@shealevy.com>
Date:   Sun Feb 18 00:47:44 2018 -0500

    Add RISC-V support
    
    Issue #31 (libatomic_ops).
    
    * src/Makefile.am (nobase_private_HEADERS): Add riscv.h entry.
    * src/atomic_ops.h [__riscv]: Include riscv.h file.
    * src/atomic_ops/sysdeps/gcc/riscv.h: New file (just include generic.h).

diff --git a/src/Makefile.am b/src/Makefile.am
index dadc932..084dd3c 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -92,6 +92,7 @@ nobase_private_HEADERS = atomic_ops/ao_version.h \
           atomic_ops/sysdeps/gcc/mips.h \
           atomic_ops/sysdeps/gcc/nios2.h \
           atomic_ops/sysdeps/gcc/powerpc.h \
+          atomic_ops/sysdeps/gcc/riscv.h \
           atomic_ops/sysdeps/gcc/s390.h \
           atomic_ops/sysdeps/gcc/sh.h \
           atomic_ops/sysdeps/gcc/sparc.h \
diff --git a/src/atomic_ops.h b/src/atomic_ops.h
index 187e1f9..22e516f 100644
--- a/src/atomic_ops.h
+++ b/src/atomic_ops.h
@@ -352,6 +352,9 @@
 # if defined(__tile__)
 #   include "atomic_ops/sysdeps/gcc/tile.h"
 # endif
+# if defined(__riscv)
+#   include "atomic_ops/sysdeps/gcc/riscv.h"
+# endif
 #endif /* __GNUC__ && !AO_USE_PTHREAD_DEFS */
 
 #if (defined(__IBMC__) || defined(__IBMCPP__)) && !defined(__GNUC__) \
diff --git a/src/atomic_ops/sysdeps/gcc/riscv.h b/src/atomic_ops/sysdeps/gcc/riscv.h
new file mode 100644
index 0000000..412c395
@@ -0,0 +1,22 @@
+/*
+ * THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED
+ * OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.
+ *
+ * Permission is hereby granted to use or copy this program
+ * for any purpose,  provided the above notices are retained on all copies.
+ * Permission to modify the code and to distribute modified code is granted,
+ * provided the above notices are retained, and a notice that the code was
+ * modified is included with the above copyright notice.
+ */
+
+/* As of gcc-7.2.0, some __GCC_HAVE_SYNC_COMPARE_AND_SWAP_n are missing. */
+/* The operations are lock-free (even for the types smaller than word).  */
+#define AO_GCC_FORCE_HAVE_CAS
+
+/* While double-word atomic operations are provided by the compiler     */
+/* (which requires -latomic currently), they are not lock-free as       */
+/* riscv itself does not have the double-word atomic operations.        */
+
+#include "generic.h"
+
+#undef AO_GCC_FORCE_HAVE_CAS
